// Argenis Jimenez Aguirre
// CPE 403
// TIVAC LAB 06
// Task 02
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"

int main(void)
{
    volatile uint16_t ui8Adjust;     // Variable to adjust brightness
    ui8Adjust = 250;                 // Center brightness to 50% duty cycle

    // Run CPU at 40MHz and use PWM divider 64 to run PWM clock at 625 kHz
    ROM_SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
    ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_64);

    // Enable PWM1
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    // Enable GPIOD for PWM output PD0
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    // Enable GPIOF to use LaunchPad buttons and LED
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    // Configure PF1 as PWM output pin for module 1, PWM generator 2
    ROM_GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);
    ROM_GPIOPinConfigure(GPIO_PF1_M1PWM5);

    // Unlock GPIO commit control register
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
    // Configure pins PF0 and PF4 as inputs
    ROM_GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
    // Configure the internal pull-up resistors on both pins
    ROM_GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    // Set module 1 PWM generator 2 as down-counter and load count value
    PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN);
    PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, 500);

    // Set pulse width to 50%
    ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, ui8Adjust);
    // Set PWM module 1 generator 2 to output and enable to run
    ROM_PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, true);
    ROM_PWMGenEnable(PWM1_BASE, PWM_GEN_2);

    while(1)
    {
        // Check if SW1 is pressed
        if(ROM_GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00)
        {
            // Decrement until it reaches 10% duty cycle
            ui8Adjust--;
            if (ui8Adjust < 50)
            {
                ui8Adjust = 50;
            }
            // Load value into PWM pulse width register
            ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, ui8Adjust);
        }
        // Check if SW2 is pressed
        if(ROM_GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00)
        {
            // Increment until it reaches 90% duty cycle
            ui8Adjust++;
            if (ui8Adjust > 450)
            {
                ui8Adjust = 450;
            }
            // Load value into PWM pulse width register
            ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, ui8Adjust);
        }
        // Set a delay to control the speed of the loop
        ROM_SysCtlDelay(100000);
    }

}
